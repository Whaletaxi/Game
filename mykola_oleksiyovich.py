# -*- coding: utf-8 -*-
"""Mykola_Oleksiyovich.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WDvpsv8Zi7UZZjBDqRwsOq6SGSDWKMUH
"""

!pip install OpenAI
!pip install pyTelegramBotAPI

import telebot
import openai
import os
import pandas as pd
import sqlite3

# Commented out IPython magic to ensure Python compatibility.
# %env OPENAI_API_KEY = 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
bot_key = "5806941234:AAEJs8-H-KCMfN6FsYH_iUxYdG4LKanL8jo"

openai.organization = "org-jl9xBg6qSiM919gQBwn46zin"
openai.api_key = os.getenv("OPENAI_API_KEY")

with open('/content/drive/MyDrive/Colab Notebooks/Game/Prompt.txt') as f:
    prompt = f.readlines()
with open('/content/drive/MyDrive/Colab Notebooks/Game/Intro.txt') as f:
    intro = f.readlines()

df = pd.DataFrame({
    'id':['1','1'],
    'role':['system','assistant'],
    'content':[prompt[0],intro[0]],
    })

tuple_list = list(df.to_records(index=False))
print(tuple_list)

# Create DB
#connection = sqlite3.connect("/content/drive/MyDrive/Colab Notebooks/Game/game.db")
#cursor = connection.cursor()
#cursor.execute("create table game (id integer,session integer, role text, content text)")
# Path to DB
db_path = "/content/drive/MyDrive/Colab Notebooks/Game/game.db"

# Add row to DB
def db_add(path,id,session,system,content):
  tuple_list = [(id,session,system,content)]
  connection = sqlite3.connect(db_path)
  cursor = connection.cursor()
  cursor.executemany("insert into game values (?,?,?,?)", tuple_list)
  connection.commit()
  connection.close()

# Get last row fron DB
def db_get_last(path,id):
  #Open DB
  connection = sqlite3.connect(db_path)
  cursor = connection.cursor()
  # Execute query to get last row
  cursor.execute(f"SELECT * FROM game WHERE id={id} ORDER BY ROWID DESC LIMIT 1")
  # Get column names
  columns = [column[0] for column in cursor.description]
  # Get last row
  last_row = cursor.fetchone()
  # Convert to dictionary
  dict_row = {}
  for i in range(len(columns)):
    dict_row[columns[i]] = last_row[i]
  # Close DB
  connection.close()
  return dict_row

# Print DB
def db_for_ai(path, id, session):
  # Connect to the database
  connection = sqlite3.connect(path)
  # Get a cursor
  cursor = connection.cursor()
  # Execute a query to get all rows from a table
  cursor.execute(f"SELECT * FROM game WHERE id={id} AND session={session}")
  # Fetch the data as a list of tuples
  rows = cursor.fetchall()
  # Convert the data to a list of dictionaries
  # Here we assume that the first column is not needed
  keys = [x[0] for x in cursor.description][2:]
  result = []
  for row in rows:
    result.append(dict(zip(keys, row[2:])))
  # Print the result
  return result
  connection.close()

# Delete table
def db_table_delete(path,table_name):
  # Connect to the database
  connection = sqlite3.connect(path)
  # Create a curso
  cursor = connection.cursor()
  # Clear the tabl
  cursor.execute(f"DELETE FROM {table_name}")
  # Commit the change
  connection.commit()
  # Close the connection
  connection.close()

import sqlite3

# Print DB
def db_print(path):
  # Connect to database
  connection = sqlite3.connect(path)
  cursor = connection.cursor()
  # Retrieve records from table
  cursor.execute('SELECT * FROM game')
  records = cursor.fetchall()
  # Print records
  for record in records:
    print(record)
  # Close connection
  connection.close()

#Length if DB
def db_length(path):
  connection = sqlite3.connect(path)
  cursor = connection.cursor()
  # Execute a SELECT COUNT(*) query on the table
  cursor.execute(f"SELECT COUNT(*) FROM game")
  # Fetch the result of the query
  row_count = cursor.fetchone()[0]
  # Print the number of rows in the table
  return row_count
  # Close the cursor and the database connection
  connection.close()

#Get last session
def db_session(path,id):
  if db_length(path) == 0:
    return 1
  elif db_get_last(path,id)['session'] > 0:
    return db_get_last(path,id)['session'] + 1
  else:
      return 1

#BOT API KEY

bot = telebot.TeleBot(bot_key)

#START MESSAGE

def chatbot(input,id,session):
    if input:
        db_add(db_path,id,session,'user',input)
        #df.append({"id": id, "role": "user", "content": input},ignore_index=True)
        chat = openai.ChatCompletion.create(
            model="gpt-3.5-turbo", messages=db_for_ai(db_path,id,session)
        )
        reply = chat.choices[0].message.content
        db_add(db_path,id,session,'assistant',reply)
        #df.append({"id": id, "role": "assistant", "content": reply},ignore_index=True)
        return reply

@bot.message_handler(commands=['start','end'])
def start(message):
  sent = bot.reply_to(message, intro[0])
  #bot.register_next_step_handler(sent, review)
  user_id = message.from_user.id
  session = db_session(db_path,user_id)
  db_add(db_path,int(user_id),session,'system',prompt[0])
  db_add(db_path,int(user_id),session,'assistant',intro[0])
  print(session)
  

@bot.message_handler(func = lambda message: True)
def review(message):
  message_to_save = message.text
  user_id = message.from_user.id
  session = db_get_last(db_path,user_id)['session']
  reply = bot.reply_to(message,chatbot(message_to_save, message.from_user.id,session))
  bot.register_next_step_handler(reply, review)
  #print(df.iloc[-1])


bot.polling()

#print(dict_row["role"], dict_row["content"])
#db_add(db_path,'15','user','Hi!')
#db_add(db_path,'1234','user','What?')
#db_table_delete(db_path,'game')

#for i in range(20):
  #db_add(db_path,i,'user','hi')
# 406452002 347077370
db_print(db_path)
#for i in db_for_ai(db_path, 406452002):
  #print(i)
#db_session(db_path,406452002)